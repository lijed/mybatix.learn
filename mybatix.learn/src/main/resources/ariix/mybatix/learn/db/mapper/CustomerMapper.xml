<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ariix.mybatix.learn.db.mapper.CustomerMapper">
	
	

	<select id="getCustomerById" parameterType="Long" resultMap="customerMap">
		SELECT
			<include refid="customer_columns" />
		FROM
			cust
		where cust_id = #{custId,jdbcType=NUMERIC}
	</select>
	
	<resultMap id="customerMap" type="CustomerDomain" autoMapping="true">
		<id column="cust_id" property="custId"/>
		<result column="sponsor_id" property="sponsorId"/>
		<result column="r_first_name" property="rFirstName"/>
		<association property="custGovernmentId" column="cust_id" select="getGovernmentIdById" />
		<!-- The javaType attribute is really unnecessary, as MyBatis will figure this out for you in most cases. So you can often shorten this down to simply: -->
		<collection property="custFlags" ofType="CustomerFlagsDomain" column="cust_id"  select="selectCustFlagByCustId" javaType="ArrayList" />
	</resultMap>

	<select id="getGovernmentIdById" parameterType="Long" resultType="CustomerIdsDomain" >
		SELECT
		CUST_ID, TYPE, VAL, VERIFIED, expired_date
		FROM CUST_IDS
		WHERE CUST_ID = #{custId,jdbcType=NUMERIC}
		and type = 1
	</select>
	
	<!-- databaseId="" -->
	<!-- The where element knows to only insert "WHERE" if there is any content returned by the containing tags. Furthermore, if that content begins with "AND" or "OR", it knows to strip it off. -->	
	<select id="findCustomersBy" parameterType="CustomerSearchCriteria" resultType="CustomerDomain" >
		<bind name="firstNamePattern" value="'%' + firstName + '%'" />
		select 
			<include refid="customer_columns" /> 
		From cust 
		<where>
			country_code = #{countryCode, jdbcType=VARCHAR}
			<if test="firstName != null">
				AND upper(r_first_name) LIKE #{firstNamePattern}
			</if>
		</where>
	</select>
	
	<select id="findCustomersWithForEach" parameterType="CustomerSearchCriteria" resultType="CustomerDomain" >
		<if test="firstName != null">
			<bind name="firstNamePattern" value="'%' + firstName + '%'" />
		</if>
		select 
			<include refid="customer_columns" /> 
		From cust 
		<trim  prefix="WHERE" prefixOverrides=" AND | OR">
			country_code = #{countryCode, jdbcType=VARCHAR}
			<if test="firstName != null">
				AND upper(r_first_name) LIKE #{firstNamePattern}
			</if>
			<if test="custIds != null">
				 AND cust_id in 
				<foreach collection="custIds" item="custId" open="(" separator="," close=")">
					#{custId}
				</foreach>
			</if>
		</trim>
	</select>
	
	<select id="findCustomersByWithTrim" parameterType="CustomerSearchCriteria" resultType="CustomerDomain" >
		<bind name="firstNamePattern" value="'%' + firstName + '%'" />
		select 
			<include refid="customer_columns" /> 
		From cust 
		<trim prefix="Where" prefixOverrides="AND | OR">
			country_code = #{countryCode, jdbcType=VARCHAR}
			<if test="firstName != null">
				AND upper(r_first_name) LIKE #{firstNamePattern}
			</if>
		</trim>
	</select>
	
	<select id="findCustomersWithCollection" parameterType="CustomerSearchCriteria" resultMap="customerMap" >
		<bind name="firstNamePattern" value="'%' + firstName + '%'" />
		select 
			<include refid="customer_columns" /> 
		From cust 
		<trim prefix="Where" prefixOverrides="AND | OR">
			country_code = #{countryCode, jdbcType=VARCHAR}
			<if test="firstName != null">
				AND upper(r_first_name) LIKE #{firstNamePattern}
			</if>
		</trim>
	</select>
	
	<select id="selectCustFlagByCustId" resultType="CustomerFlagsDomain" parameterType="long">
		select 
    		CUST_ID, FLAG_ID, VAL, CREATE_DATE
		From cust_Flag
		where cust_id = #{custId}
	</select>
	
	<!-- the set element will dynamically prepend the SET keyword, and also eliminate any extraneous commas that might trail the value assignments after the conditions are applied. -->
	<update id="updateCustomerWithSet">
		UPDATE CUST
		<set>
			<if test="rFirstName != null and rFirstName.length > 0">r_first_name=#{rFirstName},</if>		
			<if test="rMiddleName != null">R_MIDDLE_NAME=#{rMiddleName},</if>		
			<if test="rLastName != null">R_LAST_NAME=#{rLastName}</if>		
		</set>
		where cust_id = #{custId}
	</update>
	
	<update id="updateCustomerWithTrim">
		UPDATE CUST
 		<trim  suffix="SET" suffixOverrides=",">
			<if test="rFirstName != null and rFirstName.length > 0">r_first_name=#{rFirstName}</if>		
			<if test="rMiddleName != null">R_MIDDLE_NAME=#{rMiddleName}</if>		
			<if test="rLastName != null">R_LAST_NAME=#{rLastName}</if>		
		</trim>
		where cust_id = #{custId}
	</update>
	
	<sql id="customer_columns">
		cust_id,
		sponsor_id,
		country_code,
		r_first_name,
		r_middle_name,
		r_last_name,
		n_first_name,
		n_middle_name,
		n_last_name,
		company_name,
		display_name,
		recognition_name,
		customer_type,
		current_rank,
		birth_date,
		entry_date,
		termination_date,
		last_update,
		suspension_date,
		customer_status,
		language,
		renewal_date,
		tl_level,
		kk_first,
		kk_last,
		entry_week_id,
		entered_by,
		source,
		target_tl_level,
		recognition_native_name,
		gender,
		sub_cust_type,
		dept_number,
		birth_city,
		birth_country,
		country_nationality,
		courtesy_title,
		country_of_residence,
		xo_pro_thru_week,
		recognition_country,
		nick_name
	</sql>

</mapper> 